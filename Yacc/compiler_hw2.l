/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */

#define BUF_SIZE 256

extern YYSTYPE yylval; //YYSTYPE
char buf[BUF_SIZE];

/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); }
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

/* used for the tag latter*/
%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { return ADD; }
"-" 	{ return SUB; }
"*" 	{ return MUL; }
"/" 	{ return DIV; }
"%"     { return MOD; }
"++"    { return INC; }
"--"    { return DEC; }

 /* Relational */
">"	{ return MT; }
"<"	{ return LT; }
">="	{ return MTE; }
"<="	{ return LTE; }
"=="	{ return EQ; }
"!="	{ return NE; }

 /* Assignment */
"="	{ return ASGN; }
"+="	{ return ADDASGN; }
"-="	{ return SUBASGN; }
"*="	{ return MULASGN; }
"/="	{ return DIVASGN; }
"%="	{ return MODASGN; }

 /* Logical */
"&&"	{ return AND; }
"||"	{ return OR; }
"!"	{ return NOT; }

 /* Delimiters */
"("	{ return LB; }
")"	{ return RB; }
"{"	{ return LCB; }
"}"	{ return RCB; }
"["	{ return LSB; }
"]"	{ return RSB; }
","	{ return COMMA; }

 /* Print Keywords */	
"print"		{ return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ return IF; }
"else"		{ return ELSE; }
"for"		{ return FOR; }
"while"		{ return WHILE; }
"return"    	{ return RET; }
"continue"  	{ return CONT; }
"break"     	{ return BREAK; }

 /* Declaration Keywords */
"void"		{ return VOID; }
"int"		{ return INT; }
"float"  	{ return FLOAT; }
"string"  	{ return STRING; }
"bool"  	{ return BOOL; }

 /* boolean Keywords */
"true"      { return TRUE; }
"false"     { return FALSE; }

 /* String Constant */
\"			{ BEGIN STRING_STATE; }
<STRING_STATE>\"	{ BEGIN INITIAL; }
<STRING_STATE>[^"]*	{  }

 /* Number Constant */
{integer}	{ return I_CONST; }
{float}		{ return F_CONST; }

 /* C type Comment */
"/*"			{ BEGIN COMMENT; }
<COMMENT>[^*\n]+	{  }
<COMMENT>\n		{  }
<COMMENT>"*"		{  }
<COMMENT>"*/"		{ BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ return CPP_COMMENT; }

 /* Variable ID */
 {id}       { return ID; }

 /* others */

[;]		{ return SEMICOLON; }
[\n]		{  }
[ \t]		{ } /* Ignore */
[^ \t\n]	{ } /* Ignore other charactor sets */
<<EOF>>		{ }

%%

int yywrap()
{
    return 1;
}
